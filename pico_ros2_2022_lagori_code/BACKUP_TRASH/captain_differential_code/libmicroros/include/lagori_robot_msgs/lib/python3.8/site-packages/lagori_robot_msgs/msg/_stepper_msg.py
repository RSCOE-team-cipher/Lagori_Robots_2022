# generated from rosidl_generator_py/resource/_idl.py.em
# with input from lagori_robot_msgs:msg/StepperMsg.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_StepperMsg(type):
    """Metaclass of message 'StepperMsg'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('lagori_robot_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'lagori_robot_msgs.msg.StepperMsg')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__stepper_msg
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__stepper_msg
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__stepper_msg
            cls._TYPE_SUPPORT = module.type_support_msg__msg__stepper_msg
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__stepper_msg

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class StepperMsg(metaclass=Metaclass_StepperMsg):
    """Message class 'StepperMsg'."""

    __slots__ = [
        '_one_up',
        '_one_down',
        '_two_up',
        '_two_down',
        '_three_up',
        '_three_down',
    ]

    _fields_and_field_types = {
        'one_up': 'int32',
        'one_down': 'int32',
        'two_up': 'int32',
        'two_down': 'int32',
        'three_up': 'int32',
        'three_down': 'int32',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.one_up = kwargs.get('one_up', int())
        self.one_down = kwargs.get('one_down', int())
        self.two_up = kwargs.get('two_up', int())
        self.two_down = kwargs.get('two_down', int())
        self.three_up = kwargs.get('three_up', int())
        self.three_down = kwargs.get('three_down', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.one_up != other.one_up:
            return False
        if self.one_down != other.one_down:
            return False
        if self.two_up != other.two_up:
            return False
        if self.two_down != other.two_down:
            return False
        if self.three_up != other.three_up:
            return False
        if self.three_down != other.three_down:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def one_up(self):
        """Message field 'one_up'."""
        return self._one_up

    @one_up.setter
    def one_up(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'one_up' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'one_up' field must be an integer in [-2147483648, 2147483647]"
        self._one_up = value

    @property
    def one_down(self):
        """Message field 'one_down'."""
        return self._one_down

    @one_down.setter
    def one_down(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'one_down' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'one_down' field must be an integer in [-2147483648, 2147483647]"
        self._one_down = value

    @property
    def two_up(self):
        """Message field 'two_up'."""
        return self._two_up

    @two_up.setter
    def two_up(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'two_up' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'two_up' field must be an integer in [-2147483648, 2147483647]"
        self._two_up = value

    @property
    def two_down(self):
        """Message field 'two_down'."""
        return self._two_down

    @two_down.setter
    def two_down(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'two_down' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'two_down' field must be an integer in [-2147483648, 2147483647]"
        self._two_down = value

    @property
    def three_up(self):
        """Message field 'three_up'."""
        return self._three_up

    @three_up.setter
    def three_up(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'three_up' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'three_up' field must be an integer in [-2147483648, 2147483647]"
        self._three_up = value

    @property
    def three_down(self):
        """Message field 'three_down'."""
        return self._three_down

    @three_down.setter
    def three_down(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'three_down' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'three_down' field must be an integer in [-2147483648, 2147483647]"
        self._three_down = value
